rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // üîê Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth != null
                    && request.auth.uid == userId
                    && validNewUser();
      allow update: if request.auth.uid == userId;
      allow delete: if false;

      // üîê Nested businesses and services under user
      match /businesses/{businessId} {
        allow read, write: if isSignedIn();

        match /services/{serviceId} {
          allow read, write: if isSignedIn();
        }
      }
    }

    // üîê Merchants collection
    match /merchants/{merchantId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isMerchant(merchantId);
    }

    // üîê Global services
    match /services/{serviceId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isMerchant(request.resource.data.merchantId);
    }

    // ‚úÖ Bookings collection
    match /bookings/{bookingId} {
      // Only customers can create their own valid bookings
      allow create: if isCustomer()
                    && request.resource.data.customerId == request.auth.uid
                    && validBooking(request.resource.data);

      // ‚úÖ Fixed: Allow merchant read access safely using auth lookup
      allow read: if isSignedIn() && (
        (isCustomer() && resource.data.customerId == request.auth.uid) ||
        isMerchantUser()
      );

      // ‚úÖ Allow update by owner or merchant
      allow update: if isMerchant(resource.data.merchantId)
                    || (isCustomer() && resource.data.customerId == request.auth.uid
                        && request.resource.data.status == 'cancelled');

      allow delete: if false;
    }

    // ‚úÖ Helper Functions

    function isSignedIn() {
      return request.auth != null;
    }

    function isCustomer() {
      return isSignedIn()
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'customer';
    }

    function isMerchant(merchantId) {
      return isSignedIn()
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'merchant'
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.merchantId == merchantId;
    }

    // ‚úÖ NEW: Use this in read rule to avoid crashing before resource is available
    function isMerchantUser() {
      return isSignedIn()
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'merchant';
    }

    function validNewUser() {
      return request.resource.data.keys().hasAll(['name','email','role'])
             && (request.resource.data.role in ['customer','merchant'])
             && request.resource.data.name is string
             && request.resource.data.email is string;
    }

    function validBooking(data) {
      return data.keys().hasAll(['customerId','serviceId','slotTimestamp','status','qrCodeToken','createdAt'])
             && data.customerId == request.auth.uid
             && data.status == 'pending'
             && data.createdAt == request.time;
    }
  }
}
